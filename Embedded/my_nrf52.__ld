/** Linker file generated by Keil2GCC converter.
 *    @ 2016 Ondrej Sterba, osterba@atlas.cz
  * 
 * GENERATED LINKER FILE IS PROVIDED "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.
*/

/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = 0x00010001;	/* end of RAM */
/* Generate a link error if heap and stack don't fit into RAM */
_Min_Heap_Size = 0x00000100; /* required amount of heap  */
_Min_Stack_Size = 0x00004096; /* required amount of stack */ 

/* Specify the memory areas */
MEMORY
{
FLASH (rx)	:ORIGIN = 0x23000, LENGTH = 0x5D000
RAM (xrw)	:ORIGIN = 0x20004110, LENGTH = 0xBE70
}

/* Define output sections */
SECTIONS
{
  /* The startup code goes first into FLASH */
  .isr_vector :
  {
    . = ALIGN(4);
    KEEP(*(.isr_vector)) /* Startup code */
    . = ALIGN(4);
  } >FLASH

  .descriptor :
  {
    . = ALIGN(128);
    KEEP(*(.descriptor)) /* Startup code */
  } >FLASH

  /* The program code and other data goes into FLASH */
  .text :
  {
    . = ALIGN(4);
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN(4);
    _etext = .;        /* define a global symbols at end of code */
  } >FLASH

  /* Constant data goes into FLASH */
  .rodata :
  {
    . = ALIGN(4);
    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    . = ALIGN(4);
  } >FLASH

  .ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) } >FLASH
  .ARM : {
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
  } >FLASH

  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  } >FLASH
  .init_array :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
  } >FLASH
  .fini_array :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
  } >FLASH

  /* used by the startup to initialize data */
  _sidata = LOADADDR(.data);

  /* Initialized data sections goes into RAM, load LMA copy after code */
  .data :
  {
    . = ALIGN(4);
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN(4);
    _edata = .;        /* define a global symbol at data end */
  } >RAM AT> FLASH


  /* Uninitialized data section */
  . = ALIGN(4);
  .bss :
  {
    /* This is used by the startup in order to initialize the .bss secion */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.bss*)
    *(COMMON)

    . = ALIGN(4);
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;
  } >RAM

  /* User_heap_stack section, used to check that there is enough RAM left */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
  } >RAM


  /* Remove information from the standard libraries */
  /DISCARD/ :
  {
    libnosys.a ( * )
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}







/* Linker script to configure memory regions. */

#
#SEARCH_DIR(.)
#GROUP(-lgcc -lc -lnosys)
#
#MEMORY
#{
#  FLASH (rx) : ORIGIN = 0x23000, LENGTH = 0x5D000
#  RAM (rwx) :  ORIGIN = 0x20004110, LENGTH = 0xBE70
#}
#
#SECTIONS
#{
#. = ALIGN(8);
#}
#
#SECTIONS
#{
#  . = ALIGN(4);
#  .mem_section_dummy_ram :
#  {
#  }
#  . = ALIGN(4);
#  .fs_data :
#  {
#    PROVIDE(__start_fs_data = .);
#    KEEP(*(.fs_data))
#    PROVIDE(__stop_fs_data = .);
#  } > RAM
#  . = ALIGN(4);
#  .cli_sorted_cmd_ptrs :
#  {
#    PROVIDE(__start_cli_sorted_cmd_ptrs = .);
#    KEEP(*(.cli_sorted_cmd_ptrs))
#    PROVIDE(__stop_cli_sorted_cmd_ptrs = .);
#  } > RAM
#  . = ALIGN(4);
#  .log_dynamic_data :
#  {
#    PROVIDE(__start_log_dynamic_data = .);
#    KEEP(*(SORT(.log_dynamic_data*)))
#    PROVIDE(__stop_log_dynamic_data = .);
#  } > RAM
#
#} INSERT AFTER .data;
#
#SECTIONS
#{
#  . = ALIGN(4);
#  .mem_section_dummy_rom :
#  {
#  }
#  . = ALIGN(4);
#  .sdh_soc_observers :
#  {
#    PROVIDE(__start_sdh_soc_observers = .);
#    KEEP(*(SORT(.sdh_soc_observers*)))
#    PROVIDE(__stop_sdh_soc_observers = .);
#  } > FLASH
#  . = ALIGN(4);
#  .log_const_data :
#  {
#    PROVIDE(__start_log_const_data = .);
#    KEEP(*(SORT(.log_const_data*)))
#    PROVIDE(__stop_log_const_data = .);
#  } > FLASH
#  . = ALIGN(4);
#  .svc_data :
#  {
#    PROVIDE(__start_svc_data = .);
#    KEEP(*(.svc_data))
#    PROVIDE(__stop_svc_data = .);
#  } > FLASH
#  . = ALIGN(4);
#  .sdh_req_observers :
#  {
#    PROVIDE(__start_sdh_req_observers = .);
#    KEEP(*(SORT(.sdh_req_observers*)))
#    PROVIDE(__stop_sdh_req_observers = .);
#  } > FLASH
#  . = ALIGN(4);
#  .sdh_state_observers :
#  {
#    PROVIDE(__start_sdh_state_observers = .);
#    KEEP(*(SORT(.sdh_state_observers*)))
#    PROVIDE(__stop_sdh_state_observers = .);
#  } > FLASH
#  . = ALIGN(4);
#  .sdh_stack_observers :
#  {
#    PROVIDE(__start_sdh_stack_observers = .);
#    KEEP(*(SORT(.sdh_stack_observers*)))
#    PROVIDE(__stop_sdh_stack_observers = .);
#  } > FLASH
#  . = ALIGN(4);
#    .cli_command :
#  {
#    PROVIDE(__start_cli_command = .);
#    KEEP(*(.cli_command))
#    PROVIDE(__stop_cli_command = .);
#  } > FLASH
#  . = ALIGN(4);
#  .sdh_ble_observers :
#  {
#    PROVIDE(__start_sdh_ble_observers = .);
#    KEEP(*(SORT(.sdh_ble_observers*)))
#    PROVIDE(__stop_sdh_ble_observers = .);
#  } > FLASH
#  
#
#} INSERT AFTER .text
#
#INCLUDE "nrf5x_common.ld"
